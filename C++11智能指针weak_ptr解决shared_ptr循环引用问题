
## shared_ptr循环引用，导致内存泄露问题
参考代码：

```cpp
#include <iostream>
#include <memory>
using namespace std;

class A;
class B;

class A
{
public:
    A() { cout << "A 构造函数" << endl;}
    ~A() { cout << "A 析构函数" << endl;}
    shared_ptr<B> ptr;
};

class B
{
public:
    B() { cout << "B 构造函数" << endl;}
    ~B() {cout << "B 析构函数" << endl;}
    shared_ptr<A> ptr;
};

int main()
{
    shared_ptr<A> pa(new A());   //A对象的引用计数ref=1
    shared_ptr<B> pb(new B());   //B对象的引用计数ref=1
    pa->ptr = pb;    //B对象的引用计数ref=2
    pb->ptr = pa;    //A对象的引用计数ref=2
        
    cout << "pa.use_count() = " << pa.use_count() <<endl;
    cout << "pb.use_count() = " << pb.use_count() << endl;
    //离开作用域后，虽然pa和pb智能指针对象释放了，但由于其所指对象的引用计数为1而未被释放，故造成内存泄漏。
    
    return 0;
     /*
     *首先创建的时候双方的引用计数为1，接着pb赋值给pa->ptr这个会使pb的引用计数加1，
     此时为2，pa仍为1，接着pa赋值给pb->ptr这个由于是weak_ptr指针的构造，
     不会使它的引用计数加1，pa的引用计数为1，pb的引用计数为2，离开作用域后，pa计数为0，析构，pb计数为2-1=1，不析构，
     但是由于pa析构，pa中的ptr会析构，那么引用计数减1，这时候pb引用计数为1-1=0，也析构。实现资源的完整释放。
     */
}

//输出:
A 构造函数
B 构造函数
pa.use_count() = 2
pb.use_count() = 2
```


## weak_ptr解决shared_ptr循环引用，释放资源
参考代码：

```cpp
#include <iostream>
#include <memory>
using namespace std;

class A;
class B;

class A
{
public:
    A() { cout << "A 构造函数" << endl;}
    ~A() { cout << "A 析构函数" << endl;}
    shared_ptr<B> ptr;
};

class B
{
public:
    B() { cout << "B 构造函数" << endl;}
    ~B() {cout << "B 析构函数" << endl;}
    weak_ptr<A> ptr;
};

int main()
{
    shared_ptr<A> pa(new A());   //A对象的引用计数ref=1
    shared_ptr<B> pb(new B());   //B对象的引用计数ref=1
    pa->ptr = pb;    //B对象的引用计数ref=2
    pb->ptr = pa;    //A对象的引用计数ref=2
        
    cout << "pa.use_count() = " << pa.use_count() <<endl;
    cout << "pb.use_count() = " << pb.use_count() << endl;
    //离开作用域后，虽然pa和pb智能指针对象释放了，但由于其所指对象的引用计数为1而未被释放，故造成内存泄漏。
    
    return 0;
     /*
     *首先创建的时候双方的引用计数为1，接着pb赋值给pa->ptr这个会使pb的引用计数加1，
     此时为2，pa仍为1，接着pa赋值给pb->ptr这个由于是weak_ptr指针的构造，
     不会使它的引用计数加1，pa的引用计数为1，pb的引用计数为2，离开作用域后，pa计数为0，析构，pb计数为2-1=1，不析构，
     但是由于pa析构，pa中的ptr会析构，那么引用计数减1，这时候pb引用计数为1-1=0，也析构。实现资源的完整释放。
     */
}
//输出:
A 构造函数
B 构造函数
pa.use_count() = 1
pb.use_count() = 2
A 析构函数
B 析构函数
```

